#!/usr/bin/env python3
"""
MQTT Localhost Connection Test
Ki·ªÉm tra k·∫øt n·ªëi MQTT localhost cho h·ªá th·ªëng greenhouse
"""

import paho.mqtt.client as mqtt
import json
import time
import threading
from datetime import datetime
import logging

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class MQTTConnectionTester:
    def __init__(self, broker='localhost', port=1883, username=None, password=None):
        self.broker = broker
        self.port = port
        self.username = username
        self.password = password
        self.client = None
        self.connected = False
        self.test_results = []
        
    def setup_client(self):
        """Thi·∫øt l·∫≠p MQTT client"""
        try:
            self.client = mqtt.Client()
            self.client.on_connect = self.on_connect
            self.client.on_disconnect = self.on_disconnect
            self.client.on_message = self.on_message
            self.client.on_publish = self.on_publish
            
            if self.username and self.password:
                self.client.username_pw_set(self.username, self.password)
                
            return True
        except Exception as e:
            logger.error(f"L·ªói thi·∫øt l·∫≠p client: {e}")
            return False
    
    def on_connect(self, client, userdata, flags, rc):
        """Callback khi k·∫øt n·ªëi th√†nh c√¥ng"""
        if rc == 0:
            self.connected = True
            logger.info("‚úÖ K·∫øt n·ªëi MQTT broker th√†nh c√¥ng!")
            self.test_results.append("‚úÖ K·∫øt n·ªëi: TH√ÄNH C√îNG")
            
            # Subscribe c√°c topic test
            test_topics = [
                "greenhouse/test",
                "greenhouse/sensors/test",
                "greenhouse/control/test",
                "greenhouse/status/test"
            ]
            
            for topic in test_topics:
                result = client.subscribe(topic, qos=0)
                if result[0] == 0:
                    logger.info(f"‚úÖ Subscribe topic '{topic}': TH√ÄNH C√îNG")
                    self.test_results.append(f"‚úÖ Subscribe '{topic}': TH√ÄNH C√îNG")
                else:
                    logger.error(f"‚ùå Subscribe topic '{topic}': TH·∫§T B·∫†I")
                    self.test_results.append(f"‚ùå Subscribe '{topic}': TH·∫§T B·∫†I")
        else:
            self.connected = False
            error_messages = {
                1: "Connection refused - unacceptable protocol version",
                2: "Connection refused - identifier rejected", 
                3: "Connection refused - server unavailable",
                4: "Connection refused - bad username or password",
                5: "Connection refused - not authorised"
            }
            error_msg = error_messages.get(rc, f"Unknown error code: {rc}")
            logger.error(f"‚ùå K·∫øt n·ªëi th·∫•t b·∫°i: {error_msg}")
            self.test_results.append(f"‚ùå K·∫øt n·ªëi: TH·∫§T B·∫†I - {error_msg}")
    
    def on_disconnect(self, client, userdata, rc):
        """Callback khi ng·∫Øt k·∫øt n·ªëi"""
        self.connected = False
        if rc != 0:
            logger.warning(f"‚ö†Ô∏è Ng·∫Øt k·∫øt n·ªëi kh√¥ng mong mu·ªën: {rc}")
        else:
            logger.info("‚ÑπÔ∏è Ng·∫Øt k·∫øt n·ªëi th√†nh c√¥ng")
    
    def on_message(self, client, userdata, message):
        """Callback khi nh·∫≠n message"""
        try:
            topic = message.topic
            payload = message.payload.decode()
            logger.info(f"üì® Nh·∫≠n message t·ª´ '{topic}': {payload}")
            self.test_results.append(f"üì® Nh·∫≠n message t·ª´ '{topic}': OK")
        except Exception as e:
            logger.error(f"‚ùå L·ªói x·ª≠ l√Ω message: {e}")
    
    def on_publish(self, client, userdata, mid):
        """Callback khi publish th√†nh c√¥ng"""
        logger.info(f"üì§ Message ƒë√£ ƒë∆∞·ª£c publish (ID: {mid})")
    
    def test_connection(self):
        """Test k·∫øt n·ªëi c∆° b·∫£n"""
        logger.info("üîç B·∫Øt ƒë·∫ßu ki·ªÉm tra k·∫øt n·ªëi MQTT...")
        logger.info(f"üì° Broker: {self.broker}:{self.port}")
        
        if not self.setup_client():
            return False
            
        try:
            # Th·ª≠ k·∫øt n·ªëi
            self.client.connect(self.broker, self.port, 60)
            self.client.loop_start()
            
            # Ch·ªù k·∫øt n·ªëi
            timeout = 10
            start_time = time.time()
            while not self.connected and (time.time() - start_time) < timeout:
                time.sleep(0.1)
            
            if not self.connected:
                logger.error("‚ùå Timeout khi k·∫øt n·ªëi")
                self.test_results.append("‚ùå K·∫øt n·ªëi: TIMEOUT")
                return False
                
            return True
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói k·∫øt n·ªëi: {e}")
            self.test_results.append(f"‚ùå L·ªói k·∫øt n·ªëi: {e}")
            return False
    
    def test_publish_subscribe(self):
        """Test publish/subscribe"""
        if not self.connected:
            logger.error("‚ùå Ch∆∞a k·∫øt n·ªëi ƒë·ªÉ test publish/subscribe")
            return False
            
        logger.info("üì§ Ki·ªÉm tra publish/subscribe...")
        
        # Test data theo format greenhouse
        test_messages = [
            {
                "topic": "greenhouse/test",
                "payload": {
                    "test": "connection_test",
                    "timestamp": datetime.now().isoformat(),
                    "message": "Hello from MQTT test"
                }
            },
            {
                "topic": "greenhouse/sensors/test", 
                "payload": {
                    "sensors": [
                        {
                            "type": "temperature",
                            "device_id": "test_sensor_01",
                            "value": 25.5,
                            "time": datetime.now().isoformat()
                        }
                    ]
                }
            },
            {
                "topic": "greenhouse/control/test",
                "payload": {
                    "device_id": "test_pump_01",
                    "command": "SET_STATE",
                    "status": True,
                    "timestamp": datetime.now().isoformat()
                }
            }
        ]
        
        # Publish test messages
        for msg in test_messages:
            try:
                result = self.client.publish(
                    msg["topic"],
                    json.dumps(msg["payload"]),
                    qos=0
                )
                
                if result.rc == 0:
                    logger.info(f"‚úÖ Publish '{msg['topic']}': TH√ÄNH C√îNG")
                    self.test_results.append(f"‚úÖ Publish '{msg['topic']}': TH√ÄNH C√îNG")
                else:
                    logger.error(f"‚ùå Publish '{msg['topic']}': TH·∫§T B·∫†I (rc={result.rc})")
                    self.test_results.append(f"‚ùå Publish '{msg['topic']}': TH·∫§T B·∫†I")
                    
            except Exception as e:
                logger.error(f"‚ùå L·ªói publish '{msg['topic']}': {e}")
                self.test_results.append(f"‚ùå L·ªói publish '{msg['topic']}': {e}")
        
        # Ch·ªù nh·∫≠n messages
        time.sleep(2)
        return True
    
    def test_greenhouse_topics(self):
        """Test c√°c topic ch√≠nh c·ªßa greenhouse system"""
        if not self.connected:
            return False
            
        logger.info("üè† Ki·ªÉm tra c√°c topic ch√≠nh c·ªßa Greenhouse...")
        
        # C√°c topic ch√≠nh c·ªßa h·ªá th·ªëng
        greenhouse_topics = [
            "greenhouse/sensors/",
            "greenhouse/devices/", 
            "greenhouse/control/pump_01",
            "greenhouse/control/fan_01",
            "greenhouse/control/cover_01"
        ]
        
        # Subscribe c√°c topic ch√≠nh
        for topic in greenhouse_topics:
            try:
                result = self.client.subscribe(topic, qos=0)
                if result[0] == 0:
                    logger.info(f"‚úÖ Subscribe greenhouse topic '{topic}': OK")
                    self.test_results.append(f"‚úÖ Subscribe '{topic}': OK")
                else:
                    logger.error(f"‚ùå Subscribe greenhouse topic '{topic}': FAILED")
                    self.test_results.append(f"‚ùå Subscribe '{topic}': FAILED")
            except Exception as e:
                logger.error(f"‚ùå L·ªói subscribe '{topic}': {e}")
        
        # Test publish control commands
        control_commands = [
            {
                "topic": "greenhouse/control/pump_01",
                "payload": {
                    "device_id": "pump_01",
                    "command": "SET_STATE", 
                    "status": True,
                    "timestamp": datetime.now().isoformat()
                }
            },
            {
                "topic": "greenhouse/control/fan_01",
                "payload": {
                    "device_id": "fan_01",
                    "command": "SET_STATE",
                    "status": False, 
                    "timestamp": datetime.now().isoformat()
                }
            },
            {
                "topic": "greenhouse/control/cover_01",
                "payload": {
                    "device_id": "cover_01",
                    "command": "SET_STATE",
                    "status": "OPEN",
                    "timestamp": datetime.now().isoformat()
                }
            }
        ]
        
        for cmd in control_commands:
            try:
                result = self.client.publish(
                    cmd["topic"],
                    json.dumps(cmd["payload"]),
                    qos=0
                )
                
                if result.rc == 0:
                    logger.info(f"‚úÖ G·ª≠i l·ªánh ƒëi·ªÅu khi·ªÉn '{cmd['topic']}': OK")
                    self.test_results.append(f"‚úÖ Control '{cmd['topic']}': OK")
                else:
                    logger.error(f"‚ùå G·ª≠i l·ªánh ƒëi·ªÅu khi·ªÉn '{cmd['topic']}': FAILED")
                    self.test_results.append(f"‚ùå Control '{cmd['topic']}': FAILED")
                    
            except Exception as e:
                logger.error(f"‚ùå L·ªói g·ª≠i l·ªánh '{cmd['topic']}': {e}")
        
        return True
    
    def cleanup(self):
        """D·ªçn d·∫πp k·∫øt n·ªëi"""
        if self.client and self.connected:
            self.client.loop_stop()
            self.client.disconnect()
            logger.info("üîå ƒê√£ ng·∫Øt k·∫øt n·ªëi MQTT")
    
    def run_full_test(self):
        """Ch·∫°y test ƒë·∫ßy ƒë·ªß"""
        logger.info("=" * 60)
        logger.info("üöÄ B·∫ÆT ƒê·∫¶U KI·ªÇM TRA MQTT LOCALHOST")
        logger.info("=" * 60)
        
        try:
            # Test 1: K·∫øt n·ªëi c∆° b·∫£n
            if not self.test_connection():
                logger.error("‚ùå Test k·∫øt n·ªëi th·∫•t b·∫°i!")
                return False
            
            time.sleep(1)
            
            # Test 2: Publish/Subscribe c∆° b·∫£n
            self.test_publish_subscribe()
            
            time.sleep(1)
            
            # Test 3: C√°c topic ch√≠nh c·ªßa greenhouse
            self.test_greenhouse_topics()
            
            time.sleep(2)
            
            return True
            
        except KeyboardInterrupt:
            logger.info("‚èπÔ∏è Test b·ªã d·ª´ng b·ªüi ng∆∞·ªùi d√πng")
            return False
        except Exception as e:
            logger.error(f"‚ùå L·ªói trong qu√° tr√¨nh test: {e}")
            return False
        finally:
            self.cleanup()
    
    def print_results(self):
        """In k·∫øt qu·∫£ test"""
        logger.info("=" * 60)
        logger.info("üìã K·∫æT QU·∫¢ KI·ªÇM TRA MQTT")
        logger.info("=" * 60)
        
        for result in self.test_results:
            logger.info(result)
        
        success_count = len([r for r in self.test_results if "‚úÖ" in r])
        total_count = len(self.test_results)
        
        logger.info("=" * 60)
        logger.info(f"üìä T·ªîNG K·∫æT: {success_count}/{total_count} test th√†nh c√¥ng")
        
        if success_count == total_count:
            logger.info("üéâ T·∫§T C·∫¢ TEST ƒê·ªÄU TH√ÄNH C√îNG!")
        else:
            logger.warning("‚ö†Ô∏è C√ì M·ªòT S·ªê TEST TH·∫§T B·∫†I!")
        
        logger.info("=" * 60)

def main():
    """H√†m main ƒë·ªÉ ch·∫°y test"""
    # S·ª≠ d·ª•ng c·∫•u h√¨nh t·ª´ config.py
    from app.config import Config
    
    tester = MQTTConnectionTester(
        broker=Config.MQTT_BROKER,
        port=Config.MQTT_PORT,
        username=Config.MQTT_USERNAME,
        password=Config.MQTT_PASSWORD
    )
    
    # Ch·∫°y test ƒë·∫ßy ƒë·ªß
    success = tester.run_full_test()
    
    # In k·∫øt qu·∫£
    tester.print_results()
    
    return success

if __name__ == "__main__":
    main()
